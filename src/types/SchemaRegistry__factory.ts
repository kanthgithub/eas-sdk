/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "./common";
import type {
  SchemaRegistry,
  SchemaRegistryInterface,
} from "./SchemaRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "uid",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "registerer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "uid",
            type: "bytes32",
          },
          {
            internalType: "contract ISchemaResolver",
            name: "resolver",
            type: "address",
          },
          {
            internalType: "bool",
            name: "revocable",
            type: "bool",
          },
          {
            internalType: "string",
            name: "schema",
            type: "string",
          },
        ],
        indexed: false,
        internalType: "struct SchemaRecord",
        name: "schema",
        type: "tuple",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "uid",
        type: "bytes32",
      },
    ],
    name: "getSchema",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "uid",
            type: "bytes32",
          },
          {
            internalType: "contract ISchemaResolver",
            name: "resolver",
            type: "address",
          },
          {
            internalType: "bool",
            name: "revocable",
            type: "bool",
          },
          {
            internalType: "string",
            name: "schema",
            type: "string",
          },
        ],
        internalType: "struct SchemaRecord",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "schema",
        type: "string",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "dataType",
            type: "bytes32",
          },
        ],
        internalType: "struct ClaimType[]",
        name: "claimTypes",
        type: "tuple[]",
      },
      {
        internalType: "contract ISchemaResolver",
        name: "resolver",
        type: "address",
      },
      {
        internalType: "bool",
        name: "revocable",
        type: "bool",
      },
    ],
    name: "register",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b506001608052600360a052600060c05260805160a05160c051610c1e61004c600039600060fe0152600060d50152600060ac0152610c1e6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d5014610046578063a2ea7c6e14610064578063aaa766e914610084575b600080fd5b61004e6100a5565b60405161005b9190610701565b60405180910390f35b61007761007236600461071b565b610148565b60405161005b9190610734565b610097610092366004610812565b610270565b60405190815260200161005b565b60606100d07f00000000000000000000000000000000000000000000000000000000000000006104b2565b6100f97f00000000000000000000000000000000000000000000000000000000000000006104b2565b6101227f00000000000000000000000000000000000000000000000000000000000000006104b2565b604051602001610134939291906108cd565b604051602081830303815290604052905090565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff161515928201929092526002820180549192916060840191906101e790610943565b80601f016020809104026020016040519081016040528092919081815260200182805461021390610943565b80156102605780601f1061023557610100808354040283529160200191610260565b820191906000526020600020905b81548152906001019060200180831161024357829003601f168201915b5050505050815250509050919050565b60008060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff168152602001841515815260200189898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091506102f2905082610570565b6000818152602081905260409020549091501561033b576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80825260008181526020818152604091829020845181559084015160018201805493860151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090941673ffffffffffffffffffffffffffffffffffffffff9092169190911792909217909155606083015183919060028201906103d79082610a14565b5090505060005b8681101561045657600082815260016020526040902088888381811061040657610406610b2e565b835460018101855560009485526020909420604090910292909201926002029091019050610441828281358155602082013560018201555050565b5050808061044e90610b5d565b9150506103de565b503373ffffffffffffffffffffffffffffffffffffffff16817fd0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e8460405161049e9190610734565b60405180910390a398975050505050505050565b606060006104bf836105b0565b600101905060008167ffffffffffffffff8111156104df576104df610996565b6040519080825280601f01601f191660200182016040528015610509576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461051357509392505050565b600081606001518260200151836040015160405160200161059393929190610bbc565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105f9577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610625576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061064357662386f26fc10000830492506010015b6305f5e100831061065b576305f5e100830492506008015b612710831061066f57612710830492506004015b60648310610681576064830492506002015b600a831061068d576001015b92915050565b60005b838110156106ae578181015183820152602001610696565b50506000910152565b600081518084526106cf816020860160208601610693565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061071460208301846106b7565b9392505050565b60006020828403121561072d57600080fd5b5035919050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff60208301511660408201526040820151151560608201526000606083015160808084015261078560a08401826106b7565b949350505050565b60008083601f84011261079f57600080fd5b50813567ffffffffffffffff8111156107b757600080fd5b6020830191508360208260061b85010111156107d257600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff811681146107fd57600080fd5b919050565b803580151581146107fd57600080fd5b6000806000806000806080878903121561082b57600080fd5b863567ffffffffffffffff8082111561084357600080fd5b818901915089601f83011261085757600080fd5b81358181111561086657600080fd5b8a602082850101111561087857600080fd5b60209283019850965090880135908082111561089357600080fd5b506108a089828a0161078d565b90955093506108b39050604088016107d9565b91506108c160608801610802565b90509295509295509295565b600084516108df818460208901610693565b80830190507f2e00000000000000000000000000000000000000000000000000000000000000808252855161091b816001850160208a01610693565b60019201918201528351610936816002840160208801610693565b0160020195945050505050565b600181811c9082168061095757607f821691505b602082108103610990577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115610a0f57600081815260208120601f850160051c810160208610156109ec5750805b601f850160051c820191505b81811015610a0b578281556001016109f8565b5050505b505050565b815167ffffffffffffffff811115610a2e57610a2e610996565b610a4281610a3c8454610943565b846109c5565b602080601f831160018114610a955760008415610a5f5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610a0b565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015610ae257888601518255948401946001909101908401610ac3565b5085821015610b1e57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610bb5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60008451610bce818460208901610693565b60609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190930190815290151560f81b60148201526015019291505056fea164736f6c6343000813000a";

type SchemaRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SchemaRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SchemaRegistry__factory extends ContractFactory {
  constructor(...args: SchemaRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SchemaRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SchemaRegistry__factory {
    return super.connect(runner) as SchemaRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SchemaRegistryInterface {
    return new Interface(_abi) as SchemaRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SchemaRegistry {
    return new Contract(address, _abi, runner) as unknown as SchemaRegistry;
  }
}
